{"version":3,"file":"es.string.from-code-point-40e8d9a0.js","sources":["../../node_modules/core-js/modules/es.string.from-code-point.js"],"sourcesContent":["var $ = require('../internals/export');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\n\nvar fromCharCode = String.fromCharCode;\n// eslint-disable-next-line es/no-string-fromcodepoint -- required for testing\nvar $fromCodePoint = String.fromCodePoint;\n\n// length should be 1, old FF problem\nvar INCORRECT_LENGTH = !!$fromCodePoint && $fromCodePoint.length != 1;\n\n// `String.fromCodePoint` method\n// https://tc39.es/ecma262/#sec-string.fromcodepoint\n$({ target: 'String', stat: true, forced: INCORRECT_LENGTH }, {\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\n  fromCodePoint: function fromCodePoint(x) {\n    var elements = [];\n    var length = arguments.length;\n    var i = 0;\n    var code;\n    while (length > i) {\n      code = +arguments[i++];\n      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');\n      elements.push(code < 0x10000\n        ? fromCharCode(code)\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00)\n      );\n    } return elements.join('');\n  }\n});\n"],"names":["$","require$$0","toAbsoluteIndex","require$$1","fromCharCode","$fromCodePoint","INCORRECT_LENGTH","__name","x","elements","length","i","code"],"mappings":"iIAAA,IAAIA,EAAIC,EACJC,EAAkBC,EAElBC,EAAe,OAAO,aAEtBC,EAAiB,OAAO,cAGxBC,EAAmB,CAAC,CAACD,GAAkBA,EAAe,QAAU,EAIpEL,EAAE,CAAE,OAAQ,SAAU,KAAM,GAAM,OAAQM,GAAoB,CAE5D,cAAeC,EAAA,SAAuBC,EAAG,CAKvC,QAJIC,EAAW,CAAA,EACXC,EAAS,UAAU,OACnBC,EAAI,EACJC,EACGF,EAASC,GAAG,CAEjB,GADAC,EAAO,CAAC,UAAUD,GAAG,EACjBT,EAAgBU,EAAM,OAAQ,IAAMA,EAAM,MAAM,WAAWA,EAAO,4BAA4B,EAClGH,EAAS,KAAKG,EAAO,MACjBR,EAAaQ,CAAI,EACjBR,IAAeQ,GAAQ,QAAY,IAAM,MAAQA,EAAO,KAAQ,KAAM,CAChF,EACM,OAAOH,EAAS,KAAK,EAAE,CAC1B,EAbc,gBAcjB,CAAC","x_google_ignoreList":[0]}